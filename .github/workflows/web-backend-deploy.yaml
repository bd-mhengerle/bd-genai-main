
name: Web Backend build and deploy to Cloud Run

on:
  push:
    branches: [ "main" ]
    paths:
      - web-backend/**
env:
  PROJECT_ID: bd-genai-internal 
  GAR_LOCATION: us-central1
  SERVICE: concierge-web-backend
  REGION: us-central1
  CLOUD_RUN_SA: gen-ai-webbackend-cloud-run@bd-genai-internal.iam.gserviceaccount.com
  DOCKERFILE: Dockerfile

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        working-directory: ./web-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"  --file ${{ env.DOCKERFILE }} .
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2 # https://github.com/google-github-actions/deploy-cloudrun
        with:
          service: ${{ env.SERVICE }}
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |-
            PROJECT_ID= ${{ env.PROJECT_ID }}
            DATABASE_ID=bd-genai-firestore
            FIRESTORE_FILES_COLLECTION=files
            FIRESTORE_CHAT_SESSION_COLLECTION=chat_session
            FIRESTORE_TAGS_COLLECTION=tags
            FIRESTORE_USER_COLLECTION=users
            FIRESTORE_KB_COLLECTION=knowledge_bases
            FIRESTORE_NEW_CHAT_RECORD_COLLECTION=report_new_chat
            FIRESTORE_NEW_MSG_RECORD_COLLECTION=report_new_msg
            FIRESTORE_NEW_UPLOAD_RECORD_COLLECTION=report_new_upload
            FIRESTORE_NEW_KB_RECORD_COLLECTION=report_new_kb
            FIRESTORE_NEW_RESUMED_CHAT_RECORD_COLLECTION=report_new_resumed_chat
            FIRESTORE_USER_ACTIVITY_COLLECTION=user_activity
            GENAI_SANDBOX_API=https://gen-ai-sandbox-1085653060506.us-central1.run.app
            ENVIRONMENT=production
            BUCKET_NAME=bd-user-upload
            ALLOWED_FILE_TYPES=application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
            MAX_UPLOAD_SIZE=104857600
            ALLOWED_ORIGINS=insights.bostondynamics.com
            EXPECTED_AUDIENCE=/projects/1085653060506/global/backendServices/9042046290302702598
          env_vars_update_strategy: overwrite
          secrets: |-
            TEST_SECRET1=TEST_SECRET1:latest
            PEOPLE_API_KEY=PEOPLE_API_KEY:latest
          flags: '--ingress=internal-and-cloud-load-balancing --max-instances=10 --min-instances=1 --concurrency=10 --service-account=${{ env.CLOUD_RUN_SA }}'
      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
